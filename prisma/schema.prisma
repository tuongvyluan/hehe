generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int       @id(map: "PK__Admin__3214EC07BAEEA6C5") @default(autoincrement()) @map("Id")
  password  String    @db.VarChar(50)  @map("Password")
  email     String    @db.VarChar(50) @map("Email")
  role      String    @db.NVarChar(15) @map("Role")
  createdAt DateTime  @default(now()) @db.Timestamp(6) @map("CreatedAt")
  updatedAt DateTime  @default(now()) @db.Timestamp(6) @map("UpdatedAt")
}

model Answer {
  id            Int             @id(map: "PK__Answer__3214EC075BD98047") @default(autoincrement()) @map("Id")
  quizId        Int
  content       String?
  isCorrect     Boolean?
  createdAt     DateTime        @default(now()) @db.Timestamp(6) @map("CreatedAt")
  updatedAt     DateTime        @default(now()) @db.Timestamp(6) @map("UpdatedAt")
  quiz          Quiz            @relation(fields: [quizId], references: [id], onUpdate: NoAction, map: "FK__Answer__QuizId__4D94879B")
  studentAnswer StudentAnswer[]
}

model Author {
  id          Int       @id(map: "PK__Author__3214EC070E164243") @default(autoincrement()) @map("Id")
  firstName   String    @db.NVarChar(50)
  lastName    String    @db.NVarChar(50)
  dob         DateTime? @db.Date
  email       String    @db.VarChar(50)
  password    String    @db.VarChar(50)
  phoneNumber String    @db.Char(10)
  status      String    @db.NVarChar(30)
  role        String    @db.NVarChar(15)
  createdAt   DateTime  @default(now()) @db.Timestamp(6) @map("CreatedAt")
  updatedAt   DateTime  @default(now()) @db.Timestamp(6) @map("UpdatedAt")
  course      Course[]
}

model Category {
  id          Int       @id(map: "PK__Category__3214EC0748434C52") @default(autoincrement()) @map("Id")
  name        String?   @db.NVarChar(50)
  description String?   @db.NVarChar(500)
  status      String?   @db.NVarChar(30)
  updatedAt   DateTime  @default(now()) @db.Timestamp(6) @map("UpdatedAt")
  course      Course[]
}

model Comment {
  id             Int             @id(map: "PK__Comment__3214EC072056A3F9") @default(autoincrement()) @map("Id")
  masterId       Int?
  studentTopicId Int?
  text           String?         @db.NVarChar(50)
  date           DateTime        @default(now()) @db.Timestamp(6)
  level          Int
  comment        Comment?        @relation("CommentToComment_MasterId", fields: [masterId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_Comment_MasterId_Comment_Id")
  studentInTopic StudentInTopic? @relation(fields: [studentTopicId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__Comment__Student__6477ECF3")
  otherComment   Comment[]       @relation("CommentToComment_MasterId")
}

model Course {
  id              Int               @id(map: "PK__Course__3214EC07CE959A99") @default(autoincrement()) @map("Id")
  authorId        Int
  categoryId      Int
  name            String?           @db.NVarChar(50)
  description     String?           @db.NVarChar(500)
  status          String?           @db.NVarChar(30)
  price           Float?            @db.Money
  createdAt       DateTime          @default(now()) @db.Timestamp(6) @map("CreatedAt")
  updatedAt       DateTime          @default(now()) @db.Timestamp(6) @map("UpdatedAt")
  duration        DateTime          @db.DateTime
  author          Author            @relation(fields: [authorId], references: [id], onUpdate: NoAction, map: "FK__Course__AuthorId__3E52440B")
  category        Category          @relation(fields: [categoryId], references: [id], onUpdate: NoAction, map: "FK__Course__Category__3F466844")
  courseInSkill   CourseInSkill[]
  section         Section[]
  studentInCourse StudentInCourse[]
}

model CourseInSkill {
  id       Int    @id(map: "PK__CourseIn__3214EC074BFC7C0F") @default(autoincrement()) @map("Id")
  skillId  Int    @unique(map: "UQ__CourseIn__DFA091864272097A")
  courseId Int
  course   Course @relation(fields: [courseId], references: [id], onUpdate: NoAction, map: "FK__CourseInS__Cours__619B8048")
  skill    Skill  @relation(fields: [skillId], references: [id], onUpdate: NoAction, map: "FK__CourseInS__Skill__60A75C0F")
}

model Quiz {
  id            Int             @id(map: "PK__Quiz__3214EC07E781E269") @default(autoincrement()) @map("Id")
  topicId       Int?            @unique(map: "UQ__Quiz__022E0F5CE1184124")
  content       String?
  date          DateTime        @default(now()) @db.Timestamp(6)
  numberAnswers Int?
  createdAt     DateTime        @default(now()) @db.Timestamp(6) @map("CreatedAt")
  updatedAt     DateTime        @default(now()) @db.Timestamp(6) @map("UpdatedAt")
  topic         Topic?          @relation(fields: [topicId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__Quiz__TopicId__4AB81AF0")
  answer        Answer[]
  studentInQuiz StudentInQuiz[]
}

model Section {
  id           Int       @id(map: "PK__Section__3214EC072649FE57") @default(autoincrement()) @map("Id")
  courseId     Int
  name         String?   @db.NVarChar(50)
  description  String?   @db.NVarChar(50)
  displayIndex Int?
  updatedAt    DateTime  @default(now()) @db.Timestamp(6) @map("UpdatedAt")
  course       Course    @relation(fields: [courseId], references: [id], onUpdate: NoAction, map: "FK__Section__CourseI__440B1D61")
  yopic        Topic[]
}

model Skill {
  id            Int            @id(map: "PK__Skill__3214EC076C1B2CCD") @default(autoincrement()) @map("Id")
  name          String?        @db.NVarChar(50)
  courseInSkill CourseInSkill?
}

model Student {
  id              Int               @id(map: "PK__Student__3214EC075FF269DF") @default(autoincrement()) @map("Id")
  firstName       String            @db.NVarChar(50)
  lastName        String            @db.NVarChar(50)
  dob             DateTime?         @db.Date
  email           String            @db.VarChar(50)
  password        String            @db.VarChar(50)
  phoneNumber     String            @db.Char(10)
  status          String            @db.NVarChar(30)
  role            String            @db.NVarChar(15)
  createdAt       DateTime          @default(now()) @db.Timestamp(6) @map("CreatedAt")
  updatedAt       DateTime          @default(now()) @db.Timestamp(6) @map("UpdatedAt")
  studentInCourse StudentInCourse[]
}

model StudentAnswer {
  id            Int            @id(map: "PK__StudentA__3214EC07611BAF56") @default(autoincrement()) @map("Id")
  studentQuizId Int?
  answerId      Int?
  createdAt     DateTime       @default(now()) @db.Timestamp(6) @map("CreatedAt")
  answer        Answer?        @relation(fields: [answerId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__StudentAn__Answe__5CD6CB2B")
  studentInQuiz StudentInQuiz? @relation(fields: [studentQuizId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__StudentAn__Stude__5BE2A6F2")
}

model StudentInCourse {
  id             Int              @id(map: "PK__StudentI__3214EC078B58C626") @default(autoincrement()) @map("Id")
  studentId      Int?
  courseId       Int?
  displayIndex   Int?
  certificate    String?          @db.VarChar(100)
  startDate      DateTime         @default(now()) @db.Timestamp(6)
  deadlineDate   DateTime         @default(now()) @db.Timestamp(6)
  status         String?          @db.NVarChar(15)
  course         Course?          @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__StudentIn__Cours__5165187F")
  student        Student?         @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__StudentIn__Stude__5070F446")
  studentInTopic StudentInTopic[]
}

model StudentInQuiz {
  id             Int             @id(map: "PK__StudentI__3214EC07500FC685") @default(autoincrement()) @map("Id")
  studentTopicId Int?
  quizId         Int?
  createdAt      DateTime        @default(now()) @db.Timestamp(6) @map("CreatedAt")
  quiz           Quiz?           @relation(fields: [quizId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__StudentIn__QuizI__59063A47")
  studentInTopic StudentInTopic? @relation(fields: [studentTopicId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__StudentIn__Stude__5812160E")
  studentAnswer  StudentAnswer[]
}

model StudentInTopic {
  id              Int             @id(map: "PK__StudentI__3214EC07FF5D3D10") @default(autoincrement()) @map("Id")
  studentCourseId Int
  topicId         Int?
  startDate       DateTime?       @db.Date
  deadlineDate    DateTime?       @db.Date
  studentInCourse StudentInCourse @relation(fields: [studentCourseId], references: [id], onUpdate: NoAction, map: "FK__StudentIn__Stude__5441852A")
  topic           Topic?          @relation(fields: [topicId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__StudentIn__Topic__5535A963")
  comment         Comment[]
  studentInQuiz   StudentInQuiz[]
}

model sysdiagrams {
  name         String @db.NVarChar(128)
  principal_id Int
  diagram_id   Int    @id(map: "PK__sysdiagr__C2B05B6165073CD6") @default(autoincrement())
  version      Int?
  definition   Bytes?

  @@unique([principal_id, name], map: "UK_principal_name")
}

model Topic {
  id             Int              @id(map: "PK__Topic__3214EC073B6DDB5A") @default(autoincrement()) @map("Id")
  sectionId      Int
  courseId       Int
  name           String?          @db.NVarChar(50)
  description    String?          @db.NVarChar(50)
  status         String?          @db.NVarChar(30)
  displayIndex   Int?
  createdAt      DateTime         @default(now()) @db.Timestamp(6) @map("CreatedAt")
  updatedAt      DateTime         @default(now()) @db.Timestamp(6) @map("UpdatedAt")
  section        Section          @relation(fields: [sectionId], references: [id], onUpdate: NoAction, map: "FK__Topic__SectionId__46E78A0C")
  quiz           Quiz?
  studentInTopic StudentInTopic[]
}
